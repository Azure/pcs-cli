{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "solutionName": {
            "type": "string",
            "metadata": {
                "description": "The name of the solution"
            }
        },
        "solutionType": {
           "type": "string",
           "defaultValue": "RemoteMonitoringV2",
           "metadata": {
               "description": "The type of the solution"
           }
        },
        "storageName": {
            "type": "string",
            "defaultValue": "[concat('storage', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the storageAccount"
            }
        },
        "storageSkuName": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"
            ],
            "metadata": {
                "description": "The storage SKU name"
            }
        },
        "documentDBName": {
            "type": "string",
            "defaultValue": "[concat('documentdb-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the documentDB"
            }
        },
        "docDBConsistencyLevel": {
            "type": "string",
            "allowedValues": [
                "Strong",
                "BoundedStaleness",
                "Session",
                "ConsistentPrefix",
                "Eventual"
            ],
            "defaultValue": "Strong",
            "metadata": {
                "description": "The documentDB deault consistency level for this account."
            }
        },
        "docDBMaxStalenessPrefix": {
            "type": "int",
            "minValue": 10,
            "maxValue": 1000,
            "defaultValue": 10,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "docDBMaxIntervalInSeconds": {
            "type": "int",
            "minValue": 5,
            "maxValue": 600,
            "defaultValue": 5,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "[concat('eventhub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Event Hub"
            }
        },
        "eventHubRetentionInDays": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The event hub message retention in days"
            }
        },
        "eventHubPartitionCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The event hub partition count"
            }
        },
        "eventHubNamespaceName": {
            "type": "string",
            "defaultValue": "[concat('eventhubnamespace-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Event Hub"
            }
        },
        "eventHubSkuTier": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic", "Standard"
            ],
            "metadata": {
                "description": "The Azure Event Hub SKU Tier"
            }
        },
        "eventHubSkuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The Azure Event Hub SKU Capacity"
            }
        },
        "eventHubAuthorizationName": {
            "type": "string",
            "defaultValue": "[concat('iothubroutes-', parameters('iotHubName'))]",
            "metadata": {
                "description": "Authorization Rule Name for Event Hub endpoint in Iot Hub"
            }
        },
        "serviceBusEndpointSuffix": {
            "type": "string",
            "defaultValue": "servicebus.windows.net",
            "allowedValues": [
                "servicebus.windows.net",
                "servicebus.chinacloudapi.cn"
            ],
            "metadata": {
                "description": "Suffix added to Service Bus endpoint"
            }
        },
        "iotHubName": {
            "type": "string",
            "defaultValue": "[concat('iothub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of Azure IoT Hub"
            }
        },
        "iotHubSku": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "F1", "S1", "S2", "S3"
            ],
            "metadata": {
                "description": "The Azure IoT Hub SKU"
            }
        },
        "iotHubTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Free", "Standard"
            ],
            "metadata": {
                "description": "The Azure IoT Hub tier"
            }
        },
        "streamingJobsName": {
            "type": "string",
            "defaultValue": "[concat('streamingjobs-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of Azure StreamingJobs"
            }
        },
        "streamingJobsOutputStartMode": {
            "type": "string",
            "defaultValue": "JobStartTime",
            "allowedValues": [
                "JobStartTime",
                "LastOutputEventTime",
                "CustomTime"
            ],
            "metadata": {
                "description": "The start behavior of streamingjobs immediately upon creation"
            }
        },
        "streamingJobsEventsOutOfOrderPolicy": {
            "type": "string",
            "defaultValue": "Adjust",
            "allowedValues": [
                "Adjust",
                "Drop"
            ],
            "metadata": {
                "description": "Events that arrive outside the delay window will be dropped or adjusted based on the value selected"
            }
        },
        "streamingJobsInputContainerName": {
            "type": "string",
            "defaultValue": "referenceinput",
            "metadata": {
                "description": "The container name of reference input for the streamingjobs"
            }
        },
        "streamingJobsQuery": {
            "type": "object",
            "defaultValue": {
                "applyRuleFilterJsUdf": "function main(record) {\n    let ruleFunction = new Function('record', record.__rulefilterjs);\n    return ruleFunction(record);\n}",
                "flattenMeasurementsJsUdf": "function main(record) {\n\n    let flatRecord = {\n        '__deviceid': record.__deviceid,\n        '__ruleid': record.__ruleid\n    };\n\n    record.measurements.forEach(function (item) {\n        if (item.measurementvalue) {\n            flatRecord[item.measurementname] = item.measurementvalue;\n        }\n        else {\n            flatRecord[item.measurementname] = {\n                'avg': item.avg,\n                'max': item.max,\n                'min': item.min,\n                'count': item.count\n            };\n        }\n    });\n\n    return flatRecord;\n}",
                "removeUnusedPropertiesJsUdf": "function main(record) {\n    if (record) {\n        record.IoTHub && delete record.IoTHub;\n        record.PartitionId && delete record.PartitionId;\n        record.EventEnqueuedUtcTime && delete record.EventEnqueuedUtcTime;\n        record.EventProcessedUtcTime && delete record.EventProcessedUtcTime;\n    }\n    return record;\n}",
                "transformQuery": "WITH TelemetryAndRules AS\n(\n    SELECT\n        T.IotHub.ConnectionDeviceId as __deviceid,\n        T.PartitionId as __partitionid,\n        T.EventEnqueuedUtcTime as __receivedtime,\n        R.Id as __ruleid,\n        R.AggregationWindow,\n        Conditions.ArrayValue.Field as MeasurementName,\n        GetRecordPropertyValue(T, Conditions.ArrayValue.Field) as MeasurementValue\n    FROM\n        DeviceTelemetry T PARTITION BY PartitionId TIMESTAMP BY T.EventEnqueuedUtcTime\n        JOIN DeviceGroups G ON T.IoTHub.ConnectionDeviceId = G.DeviceId\n        JOIN Rules R ON R.GroupId = G.GroupId\n        CROSS APPLY GetArrayElements(R.Conditions) AS Conditions\n),\n-- Aggregate union results for time windows over 1, 5 and 10 minutes\nAggregateMultipleWindows AS (\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY __partitionid\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow1minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        TumblingWindow(minute, 1)\n\n    UNION\n\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY __partitionid\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow5minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        TumblingWindow(minute, 5)\n\n    UNION\n\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY __partitionid\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow10minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.MeasurementName,\n        TumblingWindow(minute, 10)\n),\n\n-- Group aggregated measurements\nGroupAggregatedMeasurements AS (\n    SELECT\n        AM.__deviceid,\n        AM.__ruleid,\n        AM.__partitionid,\n        AM.__lastReceivedTime,\n        Collect() AS Measurements\n    FROM\n        AggregateMultipleWindows AM PARTITION BY __partitionid\n    GROUP BY\n        AM.__deviceid,\n        AM.__ruleid,\n        AM.__partitionid,\n        AM.__lastReceivedTime,\n        System.Timestamp\n),\n-- Flat aggregated measurements\nFlatAggregatedMeasurements AS (\n    SELECT\n        GA.__deviceid,\n        GA.__ruleid,\n        GA.__lastReceivedTime,\n        udf.flattenMeasurements(GA) AS __aggregates\n    FROM\n        GroupAggregatedMeasurements GA PARTITION BY __partitionid\n),\n-- Combine aggregated measurements with rule filters\nCombineAggregatedMeasurementsAndRules AS (\n    SELECT\n        FA.__deviceid,\n        FA.__ruleid,\n        FA.__aggregates,\n        FA.__lastReceivedTime,\n        R.Description as __description,\n        R.Severity as __severity,\n        R.__rulefilterjs as __rulefilterjs\n    FROM\n        FlatAggregatedMeasurements FA PARTITION BY __partitionid\n        JOIN Rules R ON FA.__ruleid = R.Id\n),\n-- Apply rule filters on aggregated measurements\nApplyAggregatedRuleFilters AS\n(\n    SELECT\n        CMR.*\n    FROM\n        CombineAggregatedMeasurementsAndRules CMR PARTITION BY __partitionid\n    WHERE TRY_CAST(udf.applyRuleFilter(CMR) AS bigint) = 1\n),\n-- Group instant measurements\nGroupInstantMeasurements AS (\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.__receivedTime,\n        Collect() AS Measurements\n    FROM\n        TelemetryAndRules TR PARTITION BY __partitionid\n    WHERE\n        TR.AggregationWindow = 'instant'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.__partitionid,\n        TR.__receivedTime,\n        System.Timestamp\n),\n-- Flat instant measurements\nFlatInstantMeasurements AS (\n    SELECT\n        GI.__deviceid,\n        GI.__ruleid,\n        GI.__receivedTime,\n        udf.flattenMeasurements(GI) AS __aggregates\n    FROM\n        GroupInstantMeasurements GI PARTITION BY __partitionid\n),\n-- Combine instant measurements with rule filters\nCombineInstantMeasurementsAndRules as\n(\n    SELECT\n        FI.__deviceid,\n        FI.__ruleid,\n        FI.__receivedtime,\n        FI.__aggregates,\n        R.Description as __description,\n        R.Severity as __severity,\n        R.__rulefilterjs as __rulefilterjs\n    FROM\n        FlatInstantMeasurements FI\n        JOIN Rules R ON FI.__ruleid = R.Id\n),\n-- Apply rule filters on instant measurements\nApplyInstantRuleFilters as\n(\n    SELECT\n        CI.*\n    FROM\n        CombineInstantMeasurementsAndRules CI PARTITION BY __partitionid\n    WHERE TRY_CAST(udf.applyRuleFilter(CI) AS bigint) = 1\n),\n-- Combine all aggregated and instant alarms\nCombineAlarms as\n(\n    SELECT\n        1 as [doc.schemaVersion],\n        'alarm' as [doc.schema],\n        'open' as [status],\n        '1Rule-1Device-NMessage' as [logic],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as created,\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as modified,\n        AA.__description as [rule.description],\n        AA.__severity as [rule.severity],\n        AA.__ruleid as [rule.id],\n        AA.__deviceId as [device.id],\n        AA.__aggregates,\n        AA.__lastReceivedTime as [device.msg.received]\n    FROM\n        ApplyAggregatedRuleFilters AA PARTITION BY __partitionid\n\n    UNION\n\n    SELECT\n        1 as [doc.schemaVersion],\n        'alarm' as [doc.schema],\n        'open' as [status],\n        '1Rule-1Device-1Message' as [logic],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as created,\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as modified,\n        AI.__description as [rule.description],\n        AI.__severity as [rule.severity],\n        AI.__ruleid as [rule.id],\n        AI.__deviceId as [device.id],\n        AI.__aggregates,\n        AI.__receivedTime as [device.msg.received]\n    FROM\n        ApplyInstantRuleFilters AI PARTITION BY __partitionid\n)\n\n-- Output alarm events\nSELECT\n    CA.*\nINTO\n    Alarms\nFROM\n    CombineAlarms CA PARTITION BY __partitionid\n\n-- Output origin telemetry messages\nSELECT\n        CONCAT(T.IoTHub.ConnectionDeviceId, ';', CAST(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', T.EventEnqueuedUtcTime) AS nvarchar(max))) as id,\n        1 as [doc.schemaVersion],\n        'd2cmessage' as [doc.schema],\n        T.IoTHub.ConnectionDeviceId as [device.id],\n        'device-sensors;v1' as [device.msg.schema],\n        'StreamingJobs' as [data.schema],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as [device.msg.created],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', T.EventEnqueuedUtcTime) as [device.msg.received],\n        udf.removeUnusedProperties(T) as Data\nINTO\n    Messages\nFROM\n    DeviceTelemetry T PARTITION BY PartitionId TIMESTAMP BY T.EventEnqueuedUtcTime"
            },
            "metadata": {
                "description": "The query and udf functions for streamingjobs to process telemetry rules"
            }
        },
        "numberOfStreamingUnits": {
            "type": "int",
            "minValue": 1,
            "maxValue": 48,
            "defaultValue": 1,
            "allowedValues": [
              1, 3, 6, 12, 18, 24, 30, 36, 42, 48
            ],
            "metadata": {
                "description": "Number of Streaming Units"
              }
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "documentDBApiVersion": "2016-03-19",
        "documentDBResourceId": "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('documentDBName'))]",
        "eventHubApiVersion": "2017-04-01",
        "eventHubKeyName": "RootManageSharedAccessKey",
        "eventHubKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', parameters('eventHubNamespaceName'), variables('eventHubKeyName'))]",
        "eventHubNamespaceResourceId": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
        "eventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
        "eventHubRouteKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/AuthorizationRules', parameters('eventHubNamespaceName'), parameters('eventHubName'), parameters('eventHubAuthorizationName'))]",
        "iotHubApiVersion": "2017-01-19",
        "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "iotHubKeyName": "iothubowner",
        "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName'))]",
        "iotHubDefaultEndpoint": "events",
        "deviceNotificationRouteName": "DeviceNotifications",
        "streamAnalyticsApiVersion": "2016-03-01",
        "consumerGroupName": "streamingJobsConsumerGroup",
        "streamingJobsOutputDBName": "pcs-iothub-stream",
        "storageApiVersion": "2017-06-01",
        "storageResourceId": "[resourceId('Microsoft.Storage/storageAccounts/',  parameters('storageName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "kind": "Storage",
            "sku": {
                "name": "[parameters('storageSkuName')]"
            }
        },
        {
            "comments": "Azure CosmosDb",
            "apiVersion": "[variables('documentDBApiVersion')]",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[parameters('documentDBName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "properties": {
                "name": "[parameters('documentDBName')]",
                "databaseAccountOfferType": "standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "[parameters('docDBConsistencyLevel')]",
                    "maxStalenessPrefix": "[parameters('docDBMaxStalenessPrefix')]",
                    "maxIntervalInSeconds": "[parameters('docDBMaxIntervalInSeconds')]"
                }
            }
        },
        {
            "comments": "Azure Event Hub Namespace",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "type": "Microsoft.EventHub/namespaces",
            "name": "[parameters('eventHubNamespaceName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "sku": {
                "name": "[parameters('eventHubSkuTier')]",
                "tier": "[parameters('eventHubSkuTier')]",
                "capacity": "[parameters('eventHubSkuCapacity')]"
            },
            "properties": {
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0
            }
        },
        {
            "comments": "Azure Event Hub",
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'))]",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "messageRetentionInDays": "[parameters('eventHubRetentionInDays')]",
                "partitionCount": "[parameters('eventHubPartitionCount')]",
                "status": "Active"
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]"
            ]
        },        
        {
            "comments": "Event Hub Authorization for Iot Hub",
            "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'), '/', parameters('eventHubAuthorizationName'))]",
            "apiVersion":  "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "rights": [
                    "Send"
                ]
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]",
                "[variables('eventHubResourceId')]"
            ]
        },
        {
            "comments": "Azure IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "type": "Microsoft.Devices/Iothubs",
            "name": "[parameters('iotHubName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "sku": {
                "name": "[parameters('iotHubSku')]",
                "tier": "[parameters('iotHubTier')]",
                "capacity": 1
            },
            "properties": {
                "location": "[variables('location')]",
                "routing": {
                    "endpoints": {
                        "eventHubs": [
                            {
                                "connectionString": "[concat('Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', parameters('eventHubAuthorizationName'), ';SharedAccessKey=', listkeys(variables('eventHubRouteKeyResourceId'), variables('eventHubApiVersion')).primaryKey, ';EntityPath=',  parameters('eventHubName'))]",
                                "name": "[variables('deviceNotificationRouteName')]",
                                "subscriptionId": "[subscription().subscriptionId]",
                                "resourceGroup": "[resourceGroup().name]"
                            }
                        ]
                    },
                    "routes": [
                        {
                            "name": "TwinRoute",
                            "source": "TwinChangeEvents",
                            "condition": "true",
                            "endpointNames": [
                                "[variables('deviceNotificationRouteName')]"
                            ],
                            "isEnabled": true
                        },
                        {
                            "name": "LifecycleRoute",
                            "source": "DeviceLifecycleEvents",
                            "condition": "true",
                            "endpointNames": [
                                "[variables('deviceNotificationRouteName')]"
                            ],
                            "isEnabled": true
                        }
                    ],
                    "fallbackRoute": {
                        "name": "$fallback",
                        "source": "DeviceMessages",
                        "condition": "true",
                        "endpointNames": [
                            "[variables('iotHubDefaultEndpoint')]"
                        ],
                        "isEnabled": true
                    }
                }
            },
            "dependsOn": [
                "[variables('eventHubResourceId')]"
            ]
        },
        {
            "comments": "Consumer Group of IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('consumerGroupName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ]
        },
        {
            "comments": "Azure Stream Analytics streamingjobs",
            "apiVersion": "[variables('streamAnalyticsApiVersion')]",
            "type": "Microsoft.StreamAnalytics/streamingjobs",
            "name": "[parameters('streamingJobsName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('storageName'))]",
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]",
                "[variables('documentDBResourceId')]"
            ],
            "properties": {
                "sku": {
                    "name": "standard"
                },
                "eventsOutOfOrderMaxDelayInSeconds": 10,
                "eventsOutOfOrderPolicy": "[parameters('streamingJobsEventsOutOfOrderPolicy')]",
                "inputs": [
                    {
                        "name": "DeviceTelemetry",
                        "properties": {
                            "datasource": {
                                "properties": {
                                    "consumerGroupName": "[variables('consumerGroupName')]",
                                    "iotHubNamespace": "[parameters('iotHubName')]",
                                    "sharedAccessPolicyKey": "[listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey]",
                                    "sharedAccessPolicyName": "[variables('iotHubKeyName')]",
                                    "endpoint": "messages/events"
                                },
                                "type": "Microsoft.Devices/IotHubs"
                            },
                            "serialization": {
                                "properties": {
                                    "encoding": "UTF8"
                                },
                                "type": "Json"
                            },
                            "type": "Stream"
                        }
                    },
                    {
                        "name": "DeviceGroups",
                        "properties": {
                            "datasource": {
                                "properties": {
                                    "container": "[parameters('streamingJobsInputContainerName')]",
                                    "dateFormat": "yyyy-MM-dd",
                                    "timeFormat": "HH-mm",
                                    "pathPattern": "{date}/{time}/devicegroups.csv",
                                    "storageAccounts": [
                                        {
                                            "accountKey": "[listkeys(variables('storageResourceId'), variables('storageApiVersion')).keys[0].value]",
                                            "accountName": "[parameters('storageName')]"
                                        }
                                    ]
                                },
                                "type": "Microsoft.Storage/Blob"
                            },
                            "serialization": {
                                "properties": {
                                    "fieldDelimiter": ",",
                                    "encoding": "UTF8"
                                },
                                "type": "Csv"
                            },
                            "type": "Reference"
                        }
                    },
                    {
                        "name": "Rules",
                        "properties": {
                            "datasource": {
                                "properties": {
                                    "container": "[parameters('streamingJobsInputContainerName')]",
                                    "dateFormat": "yyyy-MM-dd",
                                    "timeFormat": "HH-mm",
                                    "pathPattern": "{date}/{time}/rules.json",
                                    "storageAccounts": [
                                        {
                                            "accountKey": "[listkeys(variables('storageResourceId'), variables('storageApiVersion')).keys[0].value]",
                                            "accountName": "[parameters('storageName')]"
                                        }
                                    ]
                                },
                                "type": "Microsoft.Storage/Blob"
                            },
                            "serialization": {
                                "properties": {
                                    "encoding": "UTF8"
                                },
                                "type": "Json"
                            },
                            "type": "Reference"
                        }
                    }
                ],
                "outputs": [
                    {
                        "name": "Alarms",
                        "properties": {
                            "datasource": {
                                "type": "Microsoft.Storage/DocumentDB",
                                "properties": {
                                    "accountId": "[parameters('documentDbName')]",
                                    "accountKey": "[listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey]",
                                    "database": "[variables('streamingJobsOutputDBName')]",
                                    "collectionNamePattern": "alarms"
                                }
                            }
                        }
                    },
                    {
                        "name": "Messages",
                        "properties": {
                            "datasource": {
                                "type": "Microsoft.Storage/DocumentDB",
                                "properties": {
                                    "accountId": "[parameters('documentDbName')]",
                                    "accountKey": "[listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey]",
                                    "database": "[variables('streamingJobsOutputDBName')]",
                                    "collectionNamePattern": "messages"
                                }
                            }
                        }
                    }
                ],
                "functions": [
                    {
                        "name": "flattenMeasurements",
                        "properties": {
                          "type": "Scalar",
                          "properties": {
                                "inputs": [
                                    {
                                        "dataType": "record"
                                    }
                                ],
                                "output": {
                                    "dataType": "any"
                                },
                                "binding": {
                                    "type": "Microsoft.StreamAnalytics/JavascriptUdf",
                                    "properties": {
                                        "script": "[parameters('streamingJobsQuery').flattenMeasurementsJsUdf]"
                                    }
                                }
                          }
                        }
                    },
                    {
                        "name": "applyRuleFilter",
                        "properties": {
                            "type": "Scalar",
                            "properties": {
                                "inputs": [
                                    {
                                        "dataType": "record"
                                    }
                                ],
                                "output": {
                                    "dataType": "any"
                                },
                                "binding": {
                                    "type": "Microsoft.StreamAnalytics/JavascriptUdf",
                                    "properties": {
                                        "script": "[parameters('streamingJobsQuery').applyRuleFilterJsUdf]"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "name": "removeUnusedProperties",
                        "properties": {
                            "type": "Scalar",
                            "properties": {
                                "inputs": [
                                    {
                                        "dataType": "record"
                                    }
                                ],
                                "output": {
                                    "dataType": "any"
                                },
                                "binding": {
                                    "type": "Microsoft.StreamAnalytics/JavascriptUdf",
                                    "properties": {
                                        "script": "[parameters('streamingJobsQuery').removeUnusedPropertiesJsUdf]"
                                    }
                                }
                            }
                        }
                    }
                ],
                "transformation": {
                    "name": "Alarms",
                    "properties": {
                        "query": "[parameters('streamingJobsQuery').transformQuery]",
                        "streamingUnits": "[parameters('numberOfStreamingUnits')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "resourceGroup" : {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "eventHubConnectionString": {
            "type": "string",
            "value": "[concat('Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', variables('eventHubKeyName'), ';SharedAccessKey=', listkeys(variables('eventHubKeyResourceId'), variables('eventHubApiVersion')).primaryKey)]"
        },
        "iotHubConnectionString": {
            "type": "string",
            "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey)]"
        },
        "documentDBConnectionString" : {
            "type": "string",
            "value": "[concat('AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';')]"
        },
        "eventHubPartitions": {
            "type": "int",
            "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.partitionCount]"
        },
        "eventHubName": {
            "type": "string",
            "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.path]"
        },
        "eventHubEndpoint": {
            "type": "string",
            "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.endpoint]"
        },
        "storageAccountName": {
            "type": "string",
            "value": "[parameters('storageName')]"
        },
        "storageAccountKey": {
            "type": "string",
            "value": "[listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
        },
        "streamingJobsName": {
            "type": "string",
            "value": "[parameters('streamingJobsName')]"
        }
    }
}