{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "solutionName": {
            "type": "string",
            "metadata": {
                "description": "The name of the solution"
            }
        },
        "solutionType": {
           "type": "string",
           "defaultValue": "RemoteMonitoringV2",
           "metadata": {
               "description": "The type of the solution"
           }
        },
        "storageName": {
            "type": "string",
            "defaultValue": "[concat('storage', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the storageAccount"
            }
        },
        "storageSkuName": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"
            ],
            "metadata": {
                "description": "The storage SKU name"
            }
        },
        "documentDBName": {
            "type": "string",
            "defaultValue": "[concat('documentdb-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the documentDB"
            }
        },
        "docDBConsistencyLevel": {
            "type": "string",
            "allowedValues": [
                "Strong",
                "BoundedStaleness",
                "Session",
                "ConsistentPrefix",
                "Eventual"
            ],
            "defaultValue": "Strong",
            "metadata": {
                "description": "The documentDB deault consistency level for this account."
            }
        },
        "docDBMaxStalenessPrefix": {
            "type": "int",
            "minValue": 10,
            "maxValue": 1000,
            "defaultValue": 10,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "docDBMaxIntervalInSeconds": {
            "type": "int",
            "minValue": 5,
            "maxValue": 600,
            "defaultValue": 5,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "[concat('eventhub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Event Hub"
            }
        },
        "eventHubRetentionInDays": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The event hub message retention in days"
            }
        },
        "eventHubPartitionCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The event hub partition count"
            }
        },
        "eventHubNamespaceName": {
            "type": "string",
            "defaultValue": "[concat('eventhubnamespace-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Event Hub"
            }
        },
        "eventHubSkuTier": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic", "Standard"
            ],
            "metadata": {
                "description": "The Azure Event Hub SKU Tier"
            }
        },
        "eventHubSkuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The Azure Event Hub SKU Capacity"
            }
        },
        "eventHubAuthorizationName": {
            "type": "string",
            "defaultValue": "[concat('iothubroutes-', parameters('iotHubName'))]",
            "metadata": {
                "description": "Authorization Rule Name for Event Hub endpoint in Iot Hub"
            }
        },
        "serviceBusEndpointSuffix": {
            "type": "string",
            "defaultValue": "servicebus.windows.net",
            "allowedValues": [
                "servicebus.windows.net",
                "servicebus.chinacloudapi.cn"
            ],
            "metadata": {
                "description": "Suffix added to Service Bus endpoint"
            }
        },
        "iotHubName": {
            "type": "string",
            "defaultValue": "[concat('iothub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of Azure IoT Hub"
            }
        },
        "iotHubSku": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "F1", "S1", "S2", "S3"
            ],
            "metadata": {
                "description": "The Azure IoT Hub SKU"
            }
        },
        "iotHubTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Free", "Standard"
            ],
            "metadata": {
                "description": "The Azure IoT Hub tier"
            }
        },
        "streamingJobsName": {
            "type": "string",
            "defaultValue": "[concat('streamingjobs-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of Azure StreamingJobs"
            }
        },
        "streamingJobOutputStartMode": {
            "type": "string",
            "defaultValue": "JobStartTime",
            "allowedValues": [
                "JobStartTime",
                "LastOutputEventTime",
                "CustomTime"
            ],
            "metadata": {
                "description": "The start behavior of Stream Analytics jobs immediately upon creation"
            }
        },
        "streamingJobEventsOutOfOrderPolicy": {
            "type": "string",
            "defaultValue": "Adjust",
            "allowedValues": [
                "Adjust",
                "Drop"
            ],
            "metadata": {
                "description": "Events that arrive outside the delay window will be dropped or adjusted based on the value selected"
            }
        },
        "numberOfStreamingUnits": {
            "type": "int",
            "minValue": 1,
            "maxValue": 48,
            "defaultValue": 1,
            "allowedValues": [
              1, 3, 6, 12, 18, 24, 30, 36, 42, 48
            ],
            "metadata": {
                "description": "Number of Streaming Units"
              }
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "documentDBApiVersion": "2016-03-19",
        "documentDBResourceId": "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('documentDBName'))]",
        "eventHubApiVersion": "2017-04-01",
        "eventHubKeyName": "RootManageSharedAccessKey",
        "eventHubKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', parameters('eventHubNamespaceName'), variables('eventHubKeyName'))]",
        "eventHubNamespaceResourceId": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
        "eventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
        "eventHubRouteKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/AuthorizationRules', parameters('eventHubNamespaceName'), parameters('eventHubName'), parameters('eventHubAuthorizationName'))]",
        "iotHubApiVersion": "2017-01-19",
        "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "iotHubKeyName": "iothubowner",
        "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName'))]",
        "iotHubDefaultEndpoint": "events",
        "deviceNotificationRouteName": "DeviceNotifications",
        "streamAnalyticsApiVersion": "2016-03-01",
        "consumerGroupName": "streamingJobsConsumerGroup",
        "streamingJobsOutputDBName": "pcs-iothub-stream",
        "storageApiVersion": "2017-06-01",
        "storageResourceId": "[resourceId('Microsoft.Storage/storageAccounts/',  parameters('storageName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "kind": "Storage",
            "sku": {
                "name": "[parameters('storageSkuName')]"
            }
        },
        {
            "comments": "Azure CosmosDb",
            "apiVersion": "[variables('documentDBApiVersion')]",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[parameters('documentDBName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "properties": {
                "name": "[parameters('documentDBName')]",
                "databaseAccountOfferType": "standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "[parameters('docDBConsistencyLevel')]",
                    "maxStalenessPrefix": "[parameters('docDBMaxStalenessPrefix')]",
                    "maxIntervalInSeconds": "[parameters('docDBMaxIntervalInSeconds')]"
                }
            }
        },
        {
            "comments": "Azure Event Hub Namespace",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "type": "Microsoft.EventHub/namespaces",
            "name": "[parameters('eventHubNamespaceName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "sku": {
                "name": "[parameters('eventHubSkuTier')]",
                "tier": "[parameters('eventHubSkuTier')]",
                "capacity": "[parameters('eventHubSkuCapacity')]"
            },
            "properties": {
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0
            }
        },
        {
            "comments": "Azure Event Hub",
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'))]",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "messageRetentionInDays": "[parameters('eventHubRetentionInDays')]",
                "partitionCount": "[parameters('eventHubPartitionCount')]",
                "status": "Active"
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]"
            ]
        },        
        {
            "comments": "Event Hub Authorization for Iot Hub",
            "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'), '/', parameters('eventHubAuthorizationName'))]",
            "apiVersion":  "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "rights": [
                    "Send"
                ]
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]",
                "[variables('eventHubResourceId')]"
            ]
        },
        {
            "comments": "Azure IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "type": "Microsoft.Devices/Iothubs",
            "name": "[parameters('iotHubName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "sku": {
                "name": "[parameters('iotHubSku')]",
                "tier": "[parameters('iotHubTier')]",
                "capacity": 1
            },
            "properties": {
<<<<<<< HEAD
                "location": "[variables('location')]",
                "routing": {
                    "endpoints": {
                        "eventHubs": [
                            {
                                "connectionString": "[concat('Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', parameters('eventHubAuthorizationName'), ';SharedAccessKey=', listkeys(variables('eventHubRouteKeyResourceId'), variables('eventHubApiVersion')).primaryKey, ';EntityPath=',  parameters('eventHubName'))]",
                                "name": "[variables('deviceNotificationRouteName')]",
                                "subscriptionId": "[subscription().subscriptionId]",
                                "resourceGroup": "[resourceGroup().name]"
                            }
                        ]
                    },
                    "routes": [
                        {
                            "name": "TwinRoute",
                            "source": "TwinChangeEvents",
                            "condition": "true",
                            "endpointNames": [
                                "[variables('deviceNotificationRouteName')]"
                            ],
                            "isEnabled": true
                        },
                        {
                            "name": "LifecycleRoute",
                            "source": "DeviceLifecycleEvents",
                            "condition": "true",
                            "endpointNames": [
                                "[variables('deviceNotificationRouteName')]"
                            ],
                            "isEnabled": true
                        }
                    ],
                    "fallbackRoute": {
                        "name": "$fallback",
                        "source": "DeviceMessages",
                        "condition": "true",
                        "endpointNames": [
                            "[variables('iotHubDefaultEndpoint')]"
                        ],
                        "isEnabled": true
                    }
                }
            },
            "dependsOn": [
                "[variables('eventHubResourceId')]"
            ]
=======
                "location": "[variables('location')]"
            }
        },
        {
            "comments": "Consumer Group of IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('consumerGroupName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ]
        },
        {
            "apiVersion": "[variables('streamAnalyticsApiVersion')]",
            "type": "Microsoft.StreamAnalytics/streamingjobs",
            "name": "[parameters('streamingJobsName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('storageName'))]",
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ],
            "properties": {
                "sku": {
                    "name": "standard"
                },
                "eventsOutOfOrderMaxDelayInSeconds": 10,
                "eventsOutOfOrderPolicy": "[parameters('streamingJobEventsOutOfOrderPolicy')]",
                "inputs": [
                    {
                        "name": "DeviceTelemetry",
                        "properties": {
                            "datasource": {
                                "properties": {
                                    "consumerGroupName": "[variables('consumerGroupName')]",
                                    "iotHubNamespace": "[parameters('iotHubName')]",
                                    "sharedAccessPolicyKey": "[listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey]",
                                    "sharedAccessPolicyName": "[variables('iotHubKeyName')]",
                                    "endpoint": "messages/events"
                                },
                                "type": "Microsoft.Devices/IotHubs"
                            },
                            "serialization": {
                                "properties": {
                                    "encoding": "UTF8"
                                },
                                "type": "Json"
                            },
                            "type": "Stream"
                        }
                    },
                    {
                        "name": "DeviceGroups",
                        "properties": {
                            "datasource": {
                                "properties": {
                                    "container": "devicegroups",
                                    "dateFormat": "yyyy-MM-dd",
                                    "timeFormat": "HH-mm",
                                    "pathPattern": "referenceinput/{date}/{time}/devicegroups.json",
                                    "storageAccounts": [
                                        {
                                            "accountKey": "[listkeys(variables('storageResourceId'), variables('storageApiVersion')).keys[0].value]",
                                            "accountName": "[parameters('storageName')]"
                                        }
                                    ]
                                },
                                "type": "Microsoft.Storage/Blob"
                            },
                            "serialization": {
                                "properties": {
                                    "fieldDelimiter": ",",
                                    "encoding": "UTF8"
                                },
                                "type": "Csv"
                            },
                            "type": "Reference"
                        }
                    },
                    {
                        "name": "Rules",
                        "properties": {
                            "datasource": {
                                "properties": {
                                    "container": "rules",
                                    "dateFormat": "yyyy-MM-dd",
                                    "timeFormat": "HH-mm",
                                    "pathPattern": "referenceinput/{date}/{time}/rules.json",
                                    "storageAccounts": [
                                        {
                                            "accountKey": "[listkeys(variables('storageResourceId'), variables('storageApiVersion')).keys[0].value]",
                                            "accountName": "[parameters('storageName')]"
                                        }
                                    ]
                                },
                                "type": "Microsoft.Storage/Blob"
                            },
                            "serialization": {
                                "properties": {
                                    "encoding": "UTF8"
                                },
                                "type": "Json"
                            },
                            "type": "Reference"
                        }
                    }
                ],
                "outputs": [
                    {
                        "name": "Alarms",
                        "properties": {
                            "datasource": {
                                "type": "Microsoft.Storage/DocumentDB",
                                "properties": {
                                    "accountId": "[parameters('documentDBName')]",
                                    "accountKey": "[listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey]",
                                    "database": "[variables('streamingJobsOutputDBName')]",
                                    "collectionNamePattern": "alarms"
                                }
                            }
                        }
                    },
                    {
                        "name": "Messages",
                        "properties": {
                            "datasource": {
                                "type": "Microsoft.Storage/DocumentDB",
                                "properties": {
                                    "accountId": "[parameters('documentDBName')]",
                                    "accountKey": "[listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey]",
                                    "database": "[variables('streamingJobsOutputDBName')]",
                                    "collectionNamePattern": "messages"
                                }
                            }
                        }
                    }
                ],
                "functions": [
                    {
                        "name": "flattenMeasurements",
                        "properties": {
                          "type": "Scalar",
                          "properties": {
                            "inputs": [
                              {
                                "dataType": "record"
                              }
                            ],
                            "output": {
                              "dataType": "any"
                            },
                            "binding": {
                              "type": "Microsoft.StreamAnalytics/JavascriptUdf",
                              "properties": {
                                "script": "function main(record) {\r\n \r\n let flatRecord = {\r\n '__deviceid': record.__deviceid,\r\n '__ruleid': record.__ruleid\r\n };\r\n \r\n record.measurements.forEach(function (item) {\r\n flatRecord[item.measurementname] = {\r\n 'avg': item.avg,\r\n 'max': item.max,\r\n 'min': item.min,\r\n 'count': item.count\r\n };\r\n });\r\n \r\n return flatRecord;\r\n }"
                              }
                            }
                          }
                        }
                    },
                    {
                        "name": "applyRuleFilter",
                        "properties": {
                          "type": "Scalar",
                          "properties": {
                            "inputs": [
                              {
                                "dataType": "record"
                              }
                            ],
                            "output": {
                              "dataType": "any"
                            },
                            "binding": {
                              "type": "Microsoft.StreamAnalytics/JavascriptUdf",
                              "properties": {
                                "script": "function main(record) {\r\n let ruleFunction = new Function('record', record.__rulefilterjs);\r\n return ruleFunction(record);\r\n }"
                              }
                            }
                          }
                        }
                    },
                    {
                        "name": "removeUnusedProperties",
                        "properties": {
                          "type": "Scalar",
                          "properties": {
                            "inputs": [
                              {
                                "dataType": "record"
                              }
                            ],
                            "output": {
                              "dataType": "any"
                            },
                            "binding": {
                              "type": "Microsoft.StreamAnalytics/JavascriptUdf",
                              "properties": {
                                "script": "function main(record) {\r\n if (record) {\r\n record.IoTHub && delete record.IoTHub;\r\n record.PartitionId && delete record.PartitionId;\r\n record.EventEnqueuedUtcTime && delete record.EventEnqueuedUtcTime;\r\n record.EventProcessedUtcTime && delete record.EventProcessedUtcTime;\r\n }\r\n return record;\r\n }"
                              }
                            }
                          }
                        }
                    }
                ],
                "transformation": {
                    "name": "Alarms",
                    "properties": {
                        "query": "WITH TelemetryAndRules AS \r\n( \r\n    SELECT  \r\n        T.IotHub.ConnectionDeviceId as __deviceid,\r\n        T.PartitionId as __partitionid,\r\n        T.EventEnqueuedUtcTime as __receivedtime,\r\n        R.Id as __ruleid,\r\n        R.AggregationWindow,\r\n        Conditions.ArrayValue.Field as MeasurementName,\r\n        GetRecordPropertyValue(T, Conditions.ArrayValue.Field) as MeasurementValue\r\n    FROM\r\n        DeviceTelemetry T PARTITION BY PartitionId TIMESTAMP BY T.EventEnqueuedUtcTime\r\n        JOIN DeviceGroups G ON T.IoTHub.ConnectionDeviceId = G.DeviceId\r\n        JOIN Rules R ON R.GroupId = G.GroupId\r\n        CROSS APPLY GetArrayElements(R.Conditions) AS Conditions\r\n),\r\nWindowAggregates5Min AS (\r\n    SELECT\r\n        TA.__deviceid,\r\n        TA.__ruleid,\r\n        TA.__partitionid,\r\n        TA.MeasurementName,\r\n        AVG(TA.MeasurementValue),\r\n        MAX(TA.MeasurementValue),\r\n        MIN(TA.MeasurementValue),\r\n        COUNT(TA.MeasurementValue),\r\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TA.__receivedtime)) as __lastReceivedTime\r\n    FROM\r\n        TelemetryAndRules TA PARTITION BY __partitionid\r\n    WHERE\r\n        TA.AggregationWindow='tumblingwindow5minutes'\r\n    GROUP BY\r\n        TA.__deviceid,\r\n        TA.__ruleid, \r\n        TA.__partitionid,\r\n        TA.MeasurementName,\r\n        TumblingWindow(minute, 5)\r\n),\r\nGroupAggregatedMeasurements AS (\r\n    SELECT\r\n        WA.__deviceid,\r\n        WA.__ruleid,\r\n        WA.__partitionid,\r\n        WA.__lastReceivedTime,\r\n        Collect() AS Measurements\r\n    FROM\r\n        WindowAggregates5Min WA PARTITION BY __partitionid\r\n    GROUP BY \r\n        WA.__deviceid,\r\n        WA.__ruleid,\r\n        WA.__partitionid,\r\n        WA.__lastReceivedTime,\r\n        System.Timestamp\r\n),\r\nFlatAggregatedMeasurements AS (\r\n    SELECT\r\n        GA.__deviceid,\r\n        GA.__ruleid,\r\n        GA.__lastReceivedTime,\r\n        udf.flattenMeasurements(GA) AS __aggregates\r\n    FROM\r\n        GroupAggregatedMeasurements GA PARTITION BY __partitionid\r\n),\r\nCombineRuleFilters AS (\r\n    SELECT\r\n        FA.__deviceid,\r\n        FA.__ruleid,\r\n        FA.__aggregates,\r\n        FA.__lastReceivedTime,\r\n        R.Description as __description,\r\n        R.Severity as __severity,\r\n        R.__rulefilterjs as __rulefilterjs\r\n    FROM\r\n        FlatAggregatedMeasurements FA PARTITION BY __partitionid\r\n        JOIN Rules R ON FA.__ruleid=R.Id\r\n),\r\nApplyRuleFilters AS\r\n(\r\n    SELECT\r\n        CR.*\r\n    FROM\r\n        CombineRuleFilters CR PARTITION BY __partitionid\r\n    WHERE TRY_CAST(udf.applyRuleFilter(CR) AS bigint) = 1\r\n)\r\n\r\nSELECT\r\n    1 as [doc.schemaVersion], \r\n    'alarm' as [doc.schema], \r\n    'open' as [status], \r\n    '1Rule-1Device-NMessage' as [logic], \r\n    DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as created, \r\n    DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as modified, \r\n    AR.__description as [rule.description], \r\n    AR.__severity as [rule.severity], \r\n    AR.__ruleid as [rule.id], \r\n    AR.__deviceId as [device.id],\r\n    AR.__aggregates,\r\n    AR.__lastReceivedTime as [device.msg.received]\r\nINTO\r\n    Alarms\r\nFROM\r\n    ApplyRuleFilters AR PARTITION BY __partitionid\r\n\r\nSELECT\r\n        CONCAT(T.IoTHub.ConnectionDeviceId, ';', CAST(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', T.EventEnqueuedUtcTime) AS nvarchar(max))) as id,\r\n        1 as [doc.schemaVersion],\r\n        'd2cmessage' as [doc.schema],\r\n        T.IoTHub.ConnectionDeviceId as [device.id],\r\n        'device-sensors;v1' as [device.msg.schema],\r\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as [device.msg.created],\r\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', T.EventEnqueuedUtcTime) as [device.msg.received],\r\n        udf.removeUnusedProperties(T) as Data\r\nINTO\r\n    Messages\r\nFROM\r\n    DeviceTelemetry T PARTITION BY PartitionId TIMESTAMP BY T.EventEnqueuedUtcTime\r\n",
                        "streamingUnits": "[parameters('numberOfStreamingUnits')]"
                  }
                }
            }
>>>>>>> 1331f01... Add StreamAnalytics streamingJobs resource in ARM template
        }
    ],
    "outputs": {
        "resourceGroup" : {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "eventHubConnectionString": {
            "type": "string",
            "value": "[concat('Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', variables('eventHubKeyName'), ';SharedAccessKey=', listkeys(variables('eventHubKeyResourceId'), variables('eventHubApiVersion')).primaryKey)]"
        },
        "iotHubConnectionString": {
            "type": "string",
            "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey)]"
        },
        "documentDBConnectionString" : {
            "type": "string",
            "value": "[concat('AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';')]"
        },
        "eventHubPartitions": {
            "type": "int",
            "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.partitionCount]"
        },
        "eventHubName": {
            "type": "string",
            "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.path]"
        },
        "eventHubEndpoint": {
            "type": "string",
            "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.endpoint]"
        },
        "storageAccountName": {
            "type": "string",
            "value": "[parameters('storageName')]"
        },
        "storageAccountKey": {
            "type": "string",
            "value": "[listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
        }
    }
}