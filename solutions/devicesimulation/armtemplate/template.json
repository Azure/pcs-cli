{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "aadTenantId": {
            "type": "string",
            "defaultValue": "novalue",
            "metadata": {
                "description": "The AAD tenant identifier (GUID)"
            }
        },
        "aadInstance": {
            "type": "string",
            "defaultValue": "https://login.microsoftonline.com/",
            "metadata": {
                "description": "URL of the AAD login page (example: https://login.microsoftonline.com/)"
            }
        },
        "aadClientId": {
            "type": "string",
            "defaultValue": "novalue",
            "metadata": {
                "description": "AAD application identifier (GUID)"
            }
        },
        "solutionName": {
            "type": "string",
            "metadata": {
                "description": "The name of the solution"
            }
        },
        "solutionType": {
           "type": "string",
           "defaultValue": "DeviceSimulationV1",
           "metadata": {
               "description": "The type of the solution"
           }
        },
        "storageName": {
            "type": "string",
            "defaultValue": "[concat('storage', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the storageAccount"
            }
        },
        "storageSkuName": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"
            ],
            "metadata": {
                "description": "The storage SKU name"
            }
        },
        "storageEndpointSuffix": {
            "type": "string",
            "defaultValue": "core.windows.net",
            "allowedValues": [
                "core.windows.net",
                "core.chinacloudapi.cn",
                "core.cloudapi.de"
            ],
            "metadata": {
                "description": "Suffix added to Azure Storage hostname"
            }
        },
        "documentDBName": {
            "type": "string",
            "defaultValue": "[concat('documentdb-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the CosmosDB"
            }
        },
        "docDBConsistencyLevel": {
            "type": "string",
            "allowedValues": [
                "Strong",
                "BoundedStaleness",
                "Session",
                "ConsistentPrefix",
                "Eventual"
            ],
            "defaultValue": "Strong",
            "metadata": {
                "description": "The CosmosDB default consistency level for this account."
            }
        },
        "docDBMaxStalenessPrefix": {
            "type": "int",
            "minValue": 10,
            "maxValue": 1000,
            "defaultValue": 10,
            "metadata": {
                "description": "When CosmosDB consistency level is set to BoundedStaleness, then this value is required, otherwise it can be ignored."
            }
        },
        "docDBMaxIntervalInSeconds": {
            "type": "int",
            "minValue": 5,
            "maxValue": 600,
            "defaultValue": 5,
            "metadata": {
                "description": "When CosmosDB consistency level is set to BoundedStaleness, then this value is required, otherwise it can be ignored."
            }
        },
        "iotHubName": {
            "type": "string",
            "defaultValue": "[concat('iothub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of Azure IoT Hub"
            }
        },
        "iotHubSku": {
            "type": "string",
            "defaultValue": "S2",
            "allowedValues": [ "F1", "S1", "S2", "S3" ],
            "metadata": {
                "description": "The Azure IoT Hub SKU"
            }
        },
        "iotHubTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [ "Free", "Standard" ],
            "metadata": {
                "description": "The Azure IoT Hub tier"
            }
        },
        "iotHubUnits": {
            "type": "int",
            "minValue": 1,
            "maxValue": 100,
            "defaultValue": 1,
            "metadata": {
                "description": "The number of IoT Hub units created"
            }
        },
        "vmName": {
            "type": "string",
            "defaultValue": "[concat('vm-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the Linux Virtual Machine"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D4_v3",
            "allowedValues": [],
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "ubuntuOSVersion": {
            "type": "string",
            "defaultValue": "16.04.0-LTS",
            "allowedValues": [ "12.04.5-LTS", "14.04.5-LTS", "15.10", "16.04.0-LTS" ],
            "metadata": {
                "description": "The Ubuntu version for the Virtual Machine."
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "azureuser",
            "metadata": {
                "description": "User name for the Linux Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "User password for the Linux Virtual Machines, must between 12 and 72 characters long and have 3 of the following: 1 uppercase character, 1 lowercase character, 1 number and 1 special character that is not slash (\\) or dash (-)"
            }
        },
        "vmSetupScriptUri": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/Azure/pcs-cli/azure-iot-pcs-simulation/solutions/devicesimulation/single-vm/setup.sh",
            "metadata": {
                "description": "The URL of the script to setup a single VM deployment"
            }
        },
        "vmFQDNSuffix": {
            "type": "string",
            "defaultValue": "cloudapp.azure.com",
            "allowedValues": [
                "cloudapp.azure.com",
                "cloudapp.chinacloudapi.cn",
                "cloudapp.azure.de"
            ]
        },
        "azureWebsiteName": {
            "type": "string",
            "metadata": {
                "description": "The name of the azure website that you want to create. It will be of format {azureWebsiteName}.azurewebsites.net"
            }
        },
        "remoteEndpointSSLThumbprint": {
            "type": "securestring",
            "metadata": {
                "description": "This is the thumbprint of the HTTPS SSL Certificate"
            },
            "defaultValue": "secretkey"
        },
        "remoteEndpointCertificate": {
            "type": "securestring",
            "metadata": {
                "description": "The certificate that needs to be uploaded to the VM"
            }
        },
        "remoteEndpointCertificateKey": {
            "type": "securestring",
            "metadata": {
                "description": "The certificate key that needs to be uploaded to the VM"
            }
        },
        "domain": {
            "type": "string",
            "metadata": {
                "description": "The Azure Active Directory domain used by the Azure Subscription where the solution is deployed"
            }
        },
        "subscriptionId": {
            "type": "string",
            "metadata": {
                "description": "ID of the Azure Subscription where the solution is deployed"
            }
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "documentDBApiVersion": "2016-03-19",
        "documentDBResourceId": "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('documentDBName'))]",
        "iotHubApiVersion": "2017-01-19",
        "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "iotHubKeyName": "iothubowner",
        "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName'))]",
        "storageApiVersion": "2017-06-01",
        "storageResourceId": "[resourceId('Microsoft.Storage/storageAccounts/',  parameters('storageName'))]",
        "computeApiVersion": "2017-03-30",
        "vmFQDN": "[concat(parameters('vmName'), '.', variables('location'), '.', parameters('vmFQDNSuffix'))]",
        "vmImagePublisher": "Canonical",
        "vmImageOffer": "UbuntuServer",
        "vmStorageAccountContainerName": "vhds",
        "osDiskName": "[concat(parameters('solutionName'), '-osdisk')]",
        "networkApiVersion": "2017-06-01",
        "vnetName": "[concat(parameters('solutionName'), '-vnet')]",
        "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
        "vnetAddressPrefix": "10.0.0.0/16",
        "networkSecurityGroupName": "[concat(parameters('solutionName'), '-nsg')]",
        "subnetName": "default",
        "subnetPrefix": "10.0.0.0/24",
        "subnetResourceId": "[concat(variables('vnetResourceId'),'/subnets/',variables('subnetName'))]",
        "publicIPName": "[concat(parameters('solutionName'), '-public-ip')]",
        "nicName": "[concat(parameters('solutionName'), '-nic')]",
        "appServiceSku": "S1",
        "appServiceCapacity": "1",
        "webAppRepoURL": "https://github.com/Azure/reverse-proxy-dotnet.git",
        "webAppRepoBranch": "master",
        "webAppName": "[parameters('azureWebsiteName')]"
    },
    "resources": [
        {
            "comments": "Azure IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "type": "Microsoft.Devices/Iothubs",
            "name": "[parameters('iotHubName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[parameters('iotHubSku')]",
                "tier": "[parameters('iotHubTier')]",
                "capacity": "[parameters('iotHubUnits')]"
            },
            "properties": {
                "location": "[variables('location')]"
            },
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            }
        },
        {
            "comments": "Azure CosmosDB",
            "apiVersion": "[variables('documentDBApiVersion')]",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[parameters('documentDBName')]",
            "location": "[variables('location')]",
            "properties": {
                "name": "[parameters('documentDBName')]",
                "databaseAccountOfferType": "standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "[parameters('docDBConsistencyLevel')]",
                    "maxStalenessPrefix": "[parameters('docDBMaxStalenessPrefix')]",
                    "maxIntervalInSeconds": "[parameters('docDBMaxIntervalInSeconds')]"
                }
            },
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            }
        },
        {
            "comments": "AppService plan to host the Application Gateway Web App",
            "type": "Microsoft.Web/serverfarms",
            "sku": {
                "name": "[variables('appServiceSku')]",
                "capacity": "[variables('appServiceCapacity')]"
            },
            "name": "[variables('webAppName')]",
            "apiVersion": "2015-08-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[variables('webAppName')]"
            },
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            }
        },
        {
            "comments": "Application Gateway Web App",
            "type": "Microsoft.Web/sites",
            "name": "[parameters('azureWebsiteName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('webAppName'))]"
            ],
            "apiVersion": "2015-08-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "enabled": true,
                "clientAffinityEnabled": false,
                "serverFarmId": "[variables('webAppName')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "REMOTE_ENDPOINT",
                            "value": "[concat('https://', reference(variables('publicIPName')).dnsSettings.fqdn)]"
                        },
                        {
                            "name": "REMOTE_ENDPOINT_SSL_THUMBPRINT",
                            "value": "[parameters('remoteEndpointSSLThumbprint')]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "type": "sourcecontrols",
                    "name": "web",
                    "apiVersion": "2015-08-01",
                    "properties": {
                        "RepoUrl": "[variables('webAppRepoURL')]",
                        "branch": "[variables('webAppRepoBranch')]",
                        "IsManualIntegration": true
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', parameters('azureWebsiteName'))]"
                    ]
                }
            ],
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            }
        },
        {
            "comments": "Security rules used for the VM network interface",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('networkSecurityGroupName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "HTTPS",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "SSH",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 101,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vnetName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            },
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            }
        },
        {
            "comments": "Public IP address used for the VM",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPName')]",
            "apiVersion": "2016-03-30",
            "location": "[variables('location')]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[toLower(parameters('vmName'))]"
                },
                "idleTimeoutInMinutes": 4
            },
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            }
        },
        {
            "comments": "Network interface used by the VM",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
            ],
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAddress": "10.0.0.4",
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetResourceId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                }
            },
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            }
        },
        {
            "comments": "Storage account used to store the VM disk",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('location')]",
            "kind": "Storage",
            "sku": {
                "name": "[parameters('storageSkuName')]"
            },
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            }
        },
        {
            "comments": "VM running the microservices",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[parameters('vmName')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/', parameters('storageName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ],
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[parameters('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('vmImagePublisher')]",
                        "offer": "[variables('vmImageOffer')]",
                        "sku": "[parameters('ubuntuOSVersion')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk1",
                        "vhd": {
                            "uri": "[concat('http://',parameters('storageName'),'.blob.',parameters('storageEndpointSuffix'),'/',variables('vmStorageAccountContainerName'),'/',variables('osDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', parameters('storageName')), '2016-01-01').primaryEndpoints.blob)]"
                    }
                }
            },
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            }
        },
        {
            "comments": "Docker extension used to run the microservices",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('vmName'), '/', 'DockerExtension')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
            ],
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "DockerExtension",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "azure-environment": "[if(endsWith(reference(concat('Microsoft.Web/sites/', parameters('azureWebsiteName'))).hostNames[0], '.cn'), 'AzureChinaCloud', '')]"
                }
            },
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            }
        },
        {
            "comments": "One time script execution to prepare the VM environment",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('vmName'), '/', 'scriptextensions')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                "[resourceId('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]",
                "[resourceId('Microsoft.DocumentDb/databaseAccounts/', parameters('documentDbName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'DockerExtension')]"
            ],
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[parameters('vmSetupScriptUri')]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('sh setup.sh --log-level Info ', ' --hostname ', variables('vmFQDN'), ' --iothub-connstring ', concat('\"', 'HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey, '\"'), ' --docdb-connstring ', concat('\"', 'AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';', '\"'), ' --ssl-certificate ', concat('\"', parameters('remoteEndpointCertificate'), '\"'), ' --ssl-certificate-key ', concat('\"', parameters('remoteEndpointCertificateKey'), '\"'), ' --auth-type aad ', ' --auth-audience ', parameters('aadClientId'), ' --aad-appid ', parameters('aadClientId'), ' --aad-tenant ', parameters('aadTenantId'), ' --auth-issuer ', concat('\"https://sts.windows.net/', parameters('aadTenantId'), '/\"'), ' --aad-instance ', parameters('aadInstance'), ' --resource-group ', parameters('solutionName'), ' --solution-type ', parameters('solutionType'), ' --storage-sku ', parameters('storageSkuName'), ' --storage-endpoint-suffix ', parameters('storageEndpointSuffix'), ' --docdb-name ', parameters('documentDBName'), ' --iothub-name ', parameters('iotHubName'), ' --iothub-sku ', parameters('iotHubSku'), ' --iothub-tier ', parameters('iotHubTier'), ' --iothub-units ', parameters('iotHubUnits'), ' --solution-name ', parameters('solutionName'), ' --subscription-domain ', parameters('domain'), ' --subscription-id ', parameters('subscriptionId'))]"
                }
            },
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            }
        }
    ],
    "outputs": {
        "resourceGroup" : {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "iotHubConnectionString": {
            "type": "string",
            "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey)]"
        },
        "documentDBConnectionString" : {
            "type": "string",
            "value": "[concat('AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';')]"
        },
        "azureWebsite": {
            "type": "string",
            "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', parameters('azureWebsiteName'))).hostNames[0])]"
        },
        "vmFQDN": {
            "type": "string",
            "value": "[reference(variables('publicIPName')).dnsSettings.fqdn]"
        },
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        }
    }
}